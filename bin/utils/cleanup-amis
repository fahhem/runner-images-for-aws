#!/usr/bin/env ruby
require 'aws-sdk-ec2'
require 'terminal-table'
require 'slop'
require 'yaml'

REGIONS = YAML.load_file(File.expand_path("../../config.yml", __dir__)).fetch("regions")
AMI_PREFIX = ENV.fetch('AMI_PREFIX', 'runs-on-dev')

options = {}
usage = Slop::Options.new do |opts|
  opts.banner = "Usage: #{$0} [--force] [--all] [--help]"
  opts.bool '-f', '--force', 'Do not ask for confirmation'
  opts.bool '-a', '--all', 'Consider all AMIs [warn: this could delete all AMIs]'
  opts.bool '-h', '--help', 'Show help'
end

begin
  options = usage.parse(ARGV).to_hash
rescue Slop::Error => e
  puts "Error: #{e.message}"
  puts
  puts usage
  exit 1
end

if options[:help]
  puts usage
  exit 0
end

def cleanup_region(region, options)
  force, all = options.values_at(:force, :all)
  skip_most_recent = !all
  ec2 = Aws::EC2::Client.new(region: region)

  # Get all AMIs with the specified name pattern
  resp = ec2.describe_images({
    filters: [
      {
        name: "name",
        values: ["#{AMI_PREFIX}-*"],
      },
    ],
  })

  grouped_amis = resp.images.group_by { |ami| ami.name.sub(AMI_PREFIX + "-", "").split('-')[0..2] }.each do |(dist, variant, arch), amis|
    amis.sort_by!(&:creation_date)
    amis.reverse!
  end

  grouped_amis.each do |(dist, variant, arch), amis|
    puts "## #{region} #{AMI_PREFIX} #{dist} #{variant} #{arch}"
    table = Terminal::Table.new do |t|
      t.headings = ['AMI ID', 'Created at', 'Name']
      amis.each do |ami|
        t << [ami.image_id, ami.creation_date, ami.name]
      end
    end

    puts table

    amis.each_with_index do |ami, index|
      # Skip the 2 most recent AMIs
      if skip_most_recent && index <= 1
        next
      end

      puts ""

      # Ask for confirmation before each removal
      reply = if force
        "y"
      else
        print "Are you sure you want to deregister AMI #{ami.image_id} and delete its associated snapshot? (y/n) "
        $stdin.gets.chomp
      end

      if reply.downcase == 'y'
        puts "Deregistering AMI #{ami.image_id}..."
        sleep 2
        # Deregister the AMI
        ec2.deregister_image({image_id: ami.image_id})

        # Get the snapshot associated with the AMI
        snapshot_id = ami.block_device_mappings[0].ebs.snapshot_id

        # Delete the snapshot
        ec2.delete_snapshot({snapshot_id: snapshot_id})
      else
        puts "Skipping AMI #{ami.image_id}"
      end
    end

    puts ""
  end
end

REGIONS.each_with_index do |region, index|
  if AMI_PREFIX == "runs-on-dev" && region != "us-east-1"
    next
  end

  3.times { puts "" } unless index == 0
  cleanup_region(region, options)
end
